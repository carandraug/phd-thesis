#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os.path
import subprocess

Import('env')

## FIXME: This is really ugly.  I can do better.

## a list of lists, each element is the source file, the second is the
## filename in the data directory, the third is a list with the results
commands = [
  ['roi.m', 'Location8Cell1.lsm', [
    'roi-prebleach.png',
    'roi-postbleach.png',
    'roi-subtracted.png',
    'roi-selected.png',
  ]],
  ['frapinator.sh', 'Image114.lsm', [
    'frapinator.png',
    'frapinator-data.txt'
  ]],
  ['confluent.m', 'H4 R45H_L3_Sum.lsm', [
    'confluent-hela.png'
  ]],
  ['horse.m', 'Horse_confluent_H2B-GFP_01_08_R3D_D3D.dv', [
    'confluent-horse.png',
  ]],
  ['cropreg.m', 'HeLa_H3_1A5_01_6_R3D_D3D.dv', [
    'cropreg.png',
  ]],
  ['ifrap.m', 'HeLa_H2B-PAGFP_01_12_R3D_D3D.dv', [
    'ifrap-pre.png',
    'ifrap-post.png',
    'ifrap.png',
  ]],
]

kill_frap = []
for cm in commands:
  kill_frap.append(env.Command(
    source = cm[0],
    target = [os.path.join("results", fn) for fn in cm[2]],
    action = '$SOURCE "%s" $TARGETS' % os.path.join("data", cm[1]),
  ))

Depends(kill_frap,
  [os.path.join("scripts", f) for f in ['imread_dv.m', 'montage_cdata.m']]
)


##
## "Configure" - check that we have all the required tools installed
##

def CheckProg(context, prog_name):
  context.Message("Checking for %s..." % prog_name)
  is_ok = context.env.WhereIs(prog_name)
  context.Result(is_ok)
  return is_ok

def RunOctave(context, msg, snippet):
    context.Message("Checking for %s..." % msg)
    is_ok = (subprocess.call(["octave", "-qf", "--eval", snippet]) == 0)
    context.Result(is_ok)
    return is_ok

conf = Configure (
  env,
  custom_tests = {
    "CheckProg" : CheckProg,
    "RunOctave" : RunOctave,
  },
)

## How the fuck is this not the default in SCons?
if not env.GetOption('help'):
  progs = {
    "octave"
      : "GNU Octave must be installed",
    "bfconvert"
      : "bfconvert - Convert tool from bioformats is required",
    "fiji"
      : "fiji - distribution of ImageJ is required",
  }

  for p_name, p_desc in progs.iteritems():
    if not conf.CheckProg(p_name):
      print p_desc
      Exit(1)

  if not conf.RunOctave("Octave's image package", "pkg load image"):
    print "Octave's image package must be installed"
    Exit(1)

env = conf.Finish()

Return (['kill_frap'])
