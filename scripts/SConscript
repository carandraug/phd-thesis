## coding: utf-8
from os import path
import subprocess
import distutils.spawn

Import (
  'env',
  'data_dir',
)

##
## Build images related to the kill-frap chapter
##

## a list of lists, each element is the source file, the second is the
## filename in the data directory, the third is a list with the results
commands = [
  ['roi.m', 'Location8Cell1.lsm', [
    'roi-prebleach.png',
    'roi-postbleach.png',
    'roi-subtracted.png',
    'roi-selected.png',
  ]],
  ['frapinator.sh', 'Image114.lsm', [
    'frapinator.png'
  ]],
  ['confluent.m', 'H4\ R45H_L3_Sum.lsm', [
    'confluent-hela.png'
  ]],
  ['horse.m', 'Horse_confluent_H2B-GFP_01_08_R3D_D3D.dv', [
    'confluent-horse.png'
  ]],
  ['cropreg.m', 'HeLa_H3_1A5_01_6_R3D_D3D.dv', [
    'cropreg.png'
  ]],
  ['ifrap.m', 'HeLa_H2B-PAGFP_01_12_R3D_D3D.dv', [
    'ifrap-pre.png',
    'ifrap-post.png',
    'ifrap.png',
  ]],
]

kill_frap = []
for cm in commands:
  kill_frap.append (env.Command (
    source = 'kill-frap-' + cm[0],
    target = ['kill-frap-' + fn for fn in cm[2]],
    action = "$SOURCE %s $TARGETS" % path.join (data_dir, cm[1]),
  ))

Depends (kill_frap, [
  'imread_dv.m',
  'montage_cdata.m',
])

##
## Build stuff related to the histone catalogue chapter
##

catalogue = []

## the manual for our program which will appear as an appendix
catalogue.append (env.Command (
  source = distutils.spawn.find_executable ('bp_genbank_ref_extractor'),
  target = 'app-bp_genbank_ref_extractor-doc.tex',
  action = "pod2latex --out $TARGET $SOURCE",
))


##
## Check that we have all the required tools installed
##

def CheckApp (context, app_name):
    context.Message ("Checking for %s..." % app_name)
    is_ok = context.env.WhereIs (app_name)
    if not is_ok:
        ## because https://bitbucket.org/scons/scons/pull-request/67
        is_ok = False
    context.Result (is_ok)
    return is_ok

def RunOctave (context, msg, snippet):
    context.Message ("Checking for %s..." % msg)
    is_ok = True
    if (subprocess.call (["octave", "-qf", "--eval", snippet])):
      is_ok = False
    context.Result (is_ok)
    return is_ok

conf = Configure (
  env,
  custom_tests = {
    "CheckApp"  : CheckApp,
    "RunOctave" : RunOctave,
  },
)

apps = [
  ["octave",    "GNU Octave must be installed"],
  ["bfconvert", "bfconvert - Convert tool from bioformats is required"],
  ["fiji",      "fiji - distribution of ImageJ is required"],
  ["bp_genbank_ref_extractor", "bp_genbank_ref_extractor - BioPerl's Bio-EUtilities application"],
  ["pod2latex", "pod2latex is required to create manual for bp_genbank_ref_extractor"],
]
for app in apps:
  if not conf.CheckApp (app[0]):
    print (app[1])
    Exit (1)

if not conf.RunOctave ("Octave's image package", "pkg load image"):
  print ("Octave's image package must be installed")
  Exit (1)

env = conf.Finish ()

Return (['kill_frap', 'catalogue'])

