#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import os.path
import subprocess
import re

Import('env')

## Simple Builder to call Octave scripts.  Note that the targets are
## all in a single command.
def octave_script(env, script, source, target, args=[]):
  args = [env['OCTAVE'], "--quiet", script]
  ## We don't know if source and target are a single element or a list.
  ## I don't want to check types because 1) there's many list-type types
  ## 2) idem for single elements (string, File, Dir, and None are the ones
  ## I use most frequently), 3) even a string is considered an iterable.
  ## So I just try to append them to args.
  for f in [source, target]:
    try:
      args += f
    except TypeError as e:
      args += [f]

  c = env.NoShellCommand(target, source, action=args)
  env.Depends(c, [env.File(script)])
  return c

env.AddMethod(octave_script, "OctaveScript")

def data2results(fpath):
  """Convert a path into data to a matching path in results."""
  path_parts = []
  while True:
    fpath, tail = os.path.split(fpath)
    if not tail:
      break
    else:
      path_parts.append(tail)
  path_parts.reverse()

  if path_parts[0] != "data":
    ValueError('FPATH does not start in "data/"')

  path_parts[0] = "results"
  return os.path.join(*path_parts)

def path4script(fname=""):
  return os.path.join("scripts", fname)


## Things we used while working on the thesis but are not actually
## necessary, e.g., the split of the series file into a single tiff which
## we used with MTrackJ, or the creation of the montage and log tif to
## confirm the tracking and identification of spots.
helper_results = []

## The actual dependencies for the thesis.
fancy_frap = []

##
## The scripts
##

montage_bleach_spot = env.File(path4script("montage_bleach_spot.m"))
create_position_image = env.File(path4script("create_position_image.m"))
plot_fraps = env.File(path4script("plot_fraps.m"))

##
##
##

for root, dirs, files in os.walk(os.path.join('data', 'frapping')):
  if len(files) == 0:
    continue
  results_path = data2results(root)
  path4root_data = lambda x : os.path.join(root, x)
  path4root_results = lambda x : os.path.join(results_path, x)

  series_fpath = [f for f in files if f.startswith("position=1-")]
  if len(series_fpath) != 1:
    ValueError('more that 1 time series file in ""' %root)
  series_fpath = env.File(os.path.join(root, series_fpath[0]))

  ## a dict od dicts, to index like foci["pos_idx"]["foci_idx"]
  foci = dict()
  for f in files:
    foci_match = re.search("^position=(\d+),foci=(\d+).txt$", f)
    if not foci_match:
      continue
    pos_idx = foci_match.group(1)
    foci_idx = foci_match.group(2)
    if not foci.has_key(pos_idx):
      foci[pos_idx] = dict()
    foci[pos_idx][foci_idx] = f

  for pos_idx, pos_dict in foci.iteritems():
    for f in pos_dict.itervalues():
      coord_fpath = env.File(path4root_data(f))
      pre_fpath = env.File(path4root_data("position=%s,t=0,0pre-bleach.lsm" % pos_idx))
      post_fpath = env.File(path4root_data("position=%s,t=0,1post-bleach.lsm" % pos_idx))

      plot_fname = env.File(path4root_results("%s.png" % os.path.splitext(f)[0]))
      fancy_frap.append(env.OctaveScript(
        script = plot_fraps,
        source = [coord_fpath, pre_fpath, post_fpath, series_fpath],
        target = plot_fname,
      ))

  for f in files:
    if not f.endswith("pre-bleach.lsm"):
      continue
    position = re.search("(?<=^position=)\d+(?=,)", f).group(0)

    pre_fpath = os.path.join(root, f)
    post_fpath = re.sub(",t=0,0pre-bleach.lsm$", ",t=0,1post-bleach.lsm",
                        pre_fpath)

    ## The scripts that handle the images all take them in this order.
    img_args = [env.File(f) for f in [pre_fpath, post_fpath, series_fpath]]

    spot_montage_fname = "position="+ position +"-spot_montage.png"
    helper_results.append(env.OctaveScript(
      script = montage_bleach_spot,
      source = img_args,
      target = env.File(path4root_results(spot_montage_fname)),
    ))

    position_image_fname = "position="+ position +".tif"
    helper_results.append(env.OctaveScript(
      script = create_position_image,
      source = img_args,
      target = env.File(os.path.join(results_path, position_image_fname)),
    ))


##
## "Configure" - check that we have all the required tools installed
##

def CheckProg(context, prog_name):
  context.Message("Checking for %s..." % prog_name)
  is_ok = context.env.WhereIs(prog_name)
  context.Result(is_ok)
  return is_ok

def CheckOctavePackage(context, pkg):
    context.Message("Checking for Octave package %s..." % pkg)
    is_ok = (subprocess.call(["octave", "-qf", "--eval", "pkg load " + pkg]) == 0)
    context.Result(is_ok)
    return is_ok

conf = Configure (
  env,
  custom_tests = {
    "CheckProg" : CheckProg,
    "CheckOctavePackage" : CheckOctavePackage,
  },
)

## How the fuck is this not the default in SCons?
if not env.GetOption('help'):
  progs = {
    "octave"
      : "GNU Octave must be installed",
  }

  for p_name, p_desc in progs.iteritems():
    if not conf.CheckProg(p_name):
      print p_desc
      Exit(1)

  for pkg in ['image', 'statistics', 'imagej', 'bioformats']:
    if not conf.CheckOctavePackage(pkg):
      print "Octave's %s package must be installed" % pkg
      Exit(1)

env = conf.Finish()

Return (['fancy_frap'])
